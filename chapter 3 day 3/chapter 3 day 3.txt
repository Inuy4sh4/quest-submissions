1. Define your own contract that stores a dictionary of resources. Add a function to get a reference to one of the resources in the dictionary.
///
pub contract Test {

  pub var dictionaryGaming: @{String: Game}

  pub resource Game {
    pub let videogame: String
    init(_videogame: String) {
      self.videogame = _videogame
    }
  }

  pub fun getReference(key:String): &Game {
  return &self.dictionaryGaming[key] as &Game
  }

  init() {
    self.dictionaryGaming <- {
      "RPG": <- create Game(_videogame: "Dota 2"),
      "Shooter": <- create Game(_videogame: "CS:GO")
    }
    }
}
///

2. Create a script that reads information from that resource using the reference from the function you defined in part 1.
///
import Test from 0x03

pub fun main(): String {
  
  let reference = Test.getReference(key: "RPG")
  return reference.videogame     /// returns "Dota 2"
}
///

3. Explain, in your own words, why references can be useful in Cadence.

References are useful in Cadence because they simplify working with resources. They eliminate the redundancy of moving the resources.