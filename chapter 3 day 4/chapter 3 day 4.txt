1. Explain, in your own words, the 2 things resource interfaces can be used for (we went over both in today's content)

///  They are like clearance levels in your code: Guests, signed users, customers, managers, level1 employees, accountants, all have access to different kinds of data
and you control that through interfaces.
     Used to set pre-requirements - what to load from a resource or struct
///

2. Define your own contract. Make your own resource interface and a resource that implements the interface. Create 2 functions. 
In the 1st function, show an example of not restricting the type of the resource and accessing its content. 
In the 2nd function, show an example of restricting the type of the resource and NOT being able to access its content.

///	*** the contract ***
pub contract Interfaces {

pub resource interface ICustomer {
      pub let account: Address
    }

    pub resource Customer: ICustomer {
      pub let account: Address
      pub let homeAddress: String
      init() {
        self.account = 0x01 
        self.homeAddress = "Random city"
      }
    }



	*** function 1: ***
  pub fun noInterface() {
    let customer: @Customer <- create Customer()
    log(customer.homeAddress) // "Random City"

	*** function 2: ***
 pub fun yesInterface() {
    let customer: @Customer{ICustomer} <- create Customer()
    log(customer.homeAddress)

    destroy customer
    }

3. How would we fix this code?

pub contract Stuff {

    pub struct interface ITest {
      pub var greeting: String
      pub var favouriteFruit: String
****** pub fun changeGreeting(newGreeting: String): String -> adding the function here as well
    }

    // ERROR:
    // `structure Stuff.Test does not conform 
    // to structure interface Stuff.ITest`
    pub struct Test: ITest {
      pub var greeting: String
***** pub var favouriteFruit: String    -> forgot to add favouriteFruit

      pub fun changeGreeting(newGreeting: String): String {
        self.greeting = newGreeting
        return self.greeting // returns the new greeting
      }

      init() {
        self.greeting = "Hello!"
******  self.favouriteFruit = "Pineapple" -> forgot to initialize favouriteFruit
      }
    }

    pub fun fixThis() {
      let test: Test{ITest} = Test()
      let newGreeting = test.changeGreeting(newGreeting: "Bonjour!") // ERROR HERE: `member of restricted type is not accessible: changeGreeting`
      log(newGreeting)
    }
}