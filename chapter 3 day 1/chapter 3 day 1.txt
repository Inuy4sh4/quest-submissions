1. In words, list 3 reasons why structs are different from resources.
///
resources use the "<-" move operator for the values, not the equal operator
resources return values by using the move operator
resources cannot be overwritten, copied, or lost
///

2.Describe a situation where a resource might be better to use than a struct.
///
Since they are becoming an increasingly hot-topic, resources could be used for "soul-bound" nft's or private data.
In general, important data that should not be messed with.
///

3.What is the keyword to make a new resource?
///
The "create" keyword!
///

4. Can a resource be created in a script or transaction (assuming there isn't a public function to create one)?
///
No, resources can only be created inside the contract!
///

5. What is the type of the resource below?
///
pub resource Jacob {
 *** this is a resource of type Jacob! ***
}
///

6.  Let's play the "I Spy" game from when we were kids. I Spy 4 things wrong with this code. Please fix them.
pub contract Test {

    // Hint: There's nothing wrong here ;)
    pub resource Jacob {
        pub let rocks: Bool
        init() {
            self.rocks = true
        }
    }

    pub fun createJacob(): Jacob { // there is 1 here
        let myJacob = Jacob() // there are 2 here
        return myJacob // there is 1 here
    }
/// correct version ///
 pub fun createJacob(): @Jacob { // we forgot the "@" to specify that it is a resource
        let myJacob <- create Jacob() // we do not use "=" operator, we use "<-" to move it! Also, forgotten the operator "@" to specify that it's a resource
        return <- myJacob // When using return, we move the value using "<-"
    }
///

}