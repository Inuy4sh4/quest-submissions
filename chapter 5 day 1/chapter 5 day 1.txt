

1.    Describe what an event is, and why it might be useful to a client.
//
Events are used to announce interactions on the blockchain. Stealth mints allow you to mint whatever id of nft u want. It would be very useful to know
which nft's were already minted( although on eth you get like a 10 eth gas fee if the mint of said nft already happened)

2.    Deploy a contract with an event in it, and emit the event somewhere else in the contract indicating that it happened.
++++++
3.    Using the contract in step 2), add some pre conditions and post conditions to your contract to get used to writing them out.

// checking if my f***ing sister closed the door, or if what she closed is an actual door
pub contract EventBois {

pub event OpenDoor(state: Bool)

pub resource interface IDoor {
 
  pub var doorColor: String
  pub var knobColor: String
  pub var isDoor: Bool
 }

 pub resource Door: IDoor {
  pub var state: Bool
  pub var doorColor: String
  pub var knobColor: String
  pub var isDoor: Bool

  pub fun changeState(newState: Bool){
  pre {
    self.isDoor == false: "this is not even a door, dude!"
  }
  post {
  self.doorColor == "yellow": "why would you care about a yellow door"
  }
  self.state = newState
  }
  init() {
    self.state = true
    self.doorColor = "blue"
    self.knobColor = "teal"
    self.isDoor = true
  }

}
pub fun createDoor(): @Door{
  return <- create Door()
  }

}


*** TRANSACTION ***
import EventBois from 0x03

transaction() {

  prepare(signer: AuthAccount) {

    signer.save(<- EventBois.createDoor(), to: /storage/MyResource)
    signer.link<&EventBois.Door{EventBois.IDoor}>(/public/MyResource, target: /storage/MyResource)

    log("checking..")
  }
}

4.    For each of the functions below (numberOne, numberTwo, numberThree), follow the instructions.

pub contract Test {

	*** YES IT WILL *** 
  // TODO
  // Tell me whether or not this function will log the name.
  // name: 'Jacob'
  pub fun numberOne(name: String) {
    pre {
      name.length == 5: "This name is not cool enough."
    }
    log(name)
  }

 *** it will print jacob tucker because both pre and post conditions are true (jacob.length>5 and jacob tucker as a result)
  // TODO
  // Tell me whether or not this function will return a value.
  // name: 'Jacob'
  pub fun numberTwo(name: String): String {
    pre {
      name.length >= 0: "You must input a valid name."
    }
    post {
      result == "Jacob Tucker"
    }
    return name.concat(" Tucker")
  }

  pub resource TestResource {
    pub var number: Int
*** yes, it will return 1 because the first post condition is true (1=1) and the number then gets incremented to 1 ***
	*** later edit:  it does NOT return the number because the result is already > with 1 than the before value. ***
    // TODO
    // Tell me whether or not this function will log the updated number.
    // Also, tell me the value of `self.number` after it's run.
    pub fun numberThree(): Int {
      post {
        before(self.number) == result + 1
      }
      self.number = self.number + 1
      return self.number
    }

    init() {
      self.number = 0
    }

  }

}
