

1.    What does "force casting" with as! do? Why is it useful in our Collection?
///  it checks to see if the token is an nft type and assigns it to the nft variable if it's not, it panics and gives an error.
I hope I'm not mistaken, but this helps against reentrancy attacks where the hacker can call functions from our contracts through a custom-made contract

2.    What does auth do? When do we use it?

auth downcasts from a higher to a lower level. In our case, we go from a contract interface to a resource interface.

3.    This last quest will be your most difficult yet. Take this contract:

import NonFungibleToken from 0x02
pub contract CryptoPoops: NonFungibleToken {
  pub var totalSupply: UInt64

  pub event ContractInitialized()
  pub event Withdraw(id: UInt64, from: Address?)
  pub event Deposit(id: UInt64, to: Address?)

  pub resource NFT: NonFungibleToken.INFT {
    pub let id: UInt64

    pub let name: String
    pub let favouriteFood: String
    pub let luckyNumber: Int

    init(_name: String, _favouriteFood: String, _luckyNumber: Int) {
      self.id = self.uuid

      self.name = _name
      self.favouriteFood = _favouriteFood
      self.luckyNumber = _luckyNumber
    }
  }

  pub resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic {
    pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

    pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {
      let nft <- self.ownedNFTs.remove(key: withdrawID) 
            ?? panic("This NFT does not exist in this Collection.")
      emit Withdraw(id: nft.id, from: self.owner?.address)
      return <- nft
    }

    pub fun deposit(token: @NonFungibleToken.NFT) {
      let nft <- token as! @NFT
      emit Deposit(id: nft.id, to: self.owner?.address)
      self.ownedNFTs[nft.id] <-! nft
    }

    pub fun getIDs(): [UInt64] {
      return self.ownedNFTs.keys
    }

    pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
      return &self.ownedNFTs[id] as &NonFungibleToken.NFT
    }

    init() {
      self.ownedNFTs <- {}
    }

    destroy() {
      destroy self.ownedNFTs
    }
  }

  pub fun createEmptyCollection(): @NonFungibleToken.Collection {
    return <- create Collection()
  }

  pub resource Minter {

    pub fun createNFT(name: String, favouriteFood: String, luckyNumber: Int): @NFT {
      return <- create NFT(_name: name, _favouriteFood: favouriteFood, _luckyNumber: luckyNumber)
    }

    pub fun createMinter(): @Minter {
      return <- create Minter()
    }

  }

  init() {
    self.totalSupply = 0
    emit ContractInitialized()
    self.account.save(<- create Minter(), to: /storage/Minter)
  }
}

and add a function called borrowAuthNFT just like we did in the section called "The Problem" above. 

 pub fun borrowAuthNFT(id: UInt64): &CryptoPoops.NFT {
        let reference = &self.ownedNFTs[id] as auth &NonFungibleToken.NFT

        return reference as! &NFT
    }

Then, find a way to make it publically accessible to other people so they can read our NFT's metadata. 

import CryptoPoops from 0x01
import NonFungibleToken from 0x02

transaction {

    prepare(account: AuthAccount) {

        let yaddyayaddaCollection: @CryptoPoops.Collection <- CryptoPoops.createEmptyCollection() as! @CryptoPoops.Collection

account.save(<- yaddyayaddaCollection, to: /storage/yaddayaddaCollection)

account.link<&CryptoPoops.Collection>(/public/yaddayaddaCollection, target: /storage/yaddayaddaCollection)
}
    execute {
    log("Please work this time")
    }
}


Then, run a script to display the NFTs metadata for a certain id.

import CryptoPoops from 0x01

pub fun main(address: Address, id: UInt64): String {
    let reference = getAccount(address).getCapability<&CryptoPoops.Collection{CryptoPoops.borrowAuthNFT}>(/public/yaddayaddaCollection).borrow()
                    ?? panic ("no collection here senor")

    let nftReference: &CryptoPoops.NFT = reference.borrowAuthNFT(id: id)
        return nftReference.name
        }